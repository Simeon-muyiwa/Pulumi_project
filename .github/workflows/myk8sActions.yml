name: Kubernetes Cluster Deployment Workflow
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Deployment branch"
        required: true
        default: main
        type: choice
        options: [main, develop, release/*]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Pulumi CLI
        run: npm install -g @pulumi/pulumi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-Setup

      - name: Install System Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible packer python3 python3-pip jq
          pip3 install boto3

      - name: Generate Cluster OIDC Certificate
        run: |
          openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \
            -keyout cluster-oidc.key -out cluster-oidc.crt \
            -subj "/CN=oidc.${{ vars.CLUSTER_DOMAIN }}" \
            -addext "subjectAltName=DNS:oidc.${{ vars.CLUSTER_DOMAIN }}"
          echo "CLUSTER_CERT=$(base64 -w0 cluster-oidc.crt)" >> $GITHUB_ENV
          echo "CLUSTER_KEY=$(base64 -w0 cluster-oidc.key)" >> $GITHUB_ENV

      - name: Get Cluster Thumbprint
        run: |
          openssl x509 -in cluster-oidc.crt -fingerprint -sha1 -noout | \
            cut -d= -f2 | tr -d ':' >> cluster-thumbprint.txt
          echo "CLUSTER_THUMBPRINT=$(cat cluster-thumbprint.txt)" >> $GITHUB_ENV

      - name: Get GitHub OIDC Thumbprint
        run: |
          openssl s_client -connect token.actions.githubusercontent.com:443 \
            -servername token.actions.githubusercontent.com < /dev/null 2>/dev/null | \
            openssl x509 -fingerprint -sha1 -noout | \
            cut -d= -f2 | tr -d ':' >> github-thumbprint.txt
          echo "GITHUB_THUMBPRINT=$(cat github-thumbprint.txt)" >> $GITHUB_ENV

      - name: Configure Pulumi Secrets
        uses: pulumi/actions@v4
        with:
          command: config set --secret
          args: |
            githubOidcThumbprint ${{ env.GITHUB_THUMBPRINT }}
            clusterOidcThumbprint ${{ env.CLUSTER_THUMBPRINT }}
            clusterOidcCert ${{ env.CLUSTER_CERT }}
            clusterOidcKey ${{ env.CLUSTER_KEY }}

      - name: Upload Cert Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cluster-oidc-certs
          path: |
            cluster-oidc.crt
            cluster-oidc.key
          retention-days: 1

  packer-build-master-worker:
    needs: setup
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" | base64 -d > ~/.ssh/deployer_key
          chmod 600 ~/.ssh/deployer_key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build Master/Worker AMI
        uses: hashicorp/packer-github-actions@v1
        with:
          command: build -force -machine-readable
          arguments: kubeadm.json
          env_vars: |
            CLUSTER_TAG=${{ secrets.CLUSTER_TAG }}
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

  bastion-packer-build:
    needs: packer-build-master-worker
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" | base64 -d > ~/.ssh/deployer_key
          chmod 600 ~/.ssh/deployer_key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build Bastion AMI
        uses: hashicorp/packer-github-actions@v1
        with:
          command: build -force -machine-readable
          arguments: bastion.json
          env_vars: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

  pulumi-deploy:
    needs: [setup, packer-build-master-worker, bastion-packer-build]
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PULUMI_STACK: ${{ secrets.PULUMI_STACK }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy Infrastructure
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: ${{ env.PULUMI_STACK }}
          refresh: true
          options: "--yes --skip-preview"
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Export Stack Outputs
        run: |
          pulumi stack output --json > outputs.json
          jq -r '.masterTag' outputs.json > master-tag.txt
          jq -r '.bastionIp' outputs.json > bastion-ip.txt
          jq -r '.workerAsgName' outputs.json > worker-asg.txt
          jq -r '.accountId' outputs.json > account-id.txt
          jq -r '.roleName' outputs.json > role-name.txt
          jq -r '.clusterId' outputs.json > cluster-id.txt
          jq -r '.domain' outputs.json > domain.txt
          jq -r '.oidcRoleArn' outputs.json > oidc-role.txt
          jq -r '.permissionBoundaryArn' outputs.json > boundary-arn.txt

      - name: Upload Outputs
        uses: actions/upload-artifact@v3
        with:
          name: pulumi-outputs
          path: |
            *.txt
            outputs.json

  dynamic-inventory:
    needs: pulumi-deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Outputs
        uses: actions/download-artifact@v3
        with:
          name: pulumi-outputs
          path: ./outputs

      - name: Generate Inventory
        run: |
          python3 inventory.py \
            "$(cat outputs/master-tag.txt)" \
            "$(cat outputs/bastion-ip.txt)" \
            "$(cat outputs/worker-asg.txt)" \
            "$(cat outputs/account-id.txt)" \
            "$(cat outputs/role-name.txt)" \
            "$(cat outputs/cluster-id.txt)" \
            "$(cat outputs/domain.txt)" > inventory.json

      - name: Validate Inventory
        run: |
          if ! jq -e '.k8s_master.hosts | length > 0' inventory.json; then
            echo "ERROR: No master nodes found" && exit 1
          fi
          if ! jq -e '.k8s_worker.hosts | length > 0' inventory.json; then
            echo "ERROR: No worker nodes found" && exit 1
          fi

      - name: Upload Inventory
        uses: actions/upload-artifact@v3
        with:
          name: ansible-inventory
          path: inventory.json

  ansible-deploy:
    needs: dynamic-inventory
    runs-on: ubuntu-latest
    env:
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - name: Setup Environment
        uses: actions/download-artifact@v3
        with:
          name: ansible-inventory
          path: ./inventory

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" | base64 -d > ~/.ssh/deployer_key
          chmod 600 ~/.ssh/deployer_key

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory/inventory.json ansible/cluster-init.yml \
            -e "kms_key_arn=${{ secrets.KMS_KEY_ARN }}" \
            -e "oidc_role_arn=$(cat outputs/oidcRoleArn.txt)"\
            -e "permission_boundary_arn=$(cat outputs/boundary-arn.txt)" \
            -e "cluster_issuer=$(cat outputs/domain.txt)" \
            -e "ansible_ssh_common_args=-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

      - name: Configure Boundary
        run: |
          echo "AWS_PERMISSION_BOUNDARY=$(cat outputs/boundary-arn.txt)" >> $GITHUB_ENV

  cluster-validation:
    needs: ansible-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Verify Cluster Health
        run: |
          kubectl get nodes -o wide
          kubectl get pods -A
          kubectl get svc

  rollback:
    needs: [pulumi-deploy, ansible-deploy]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Infrastructure
        if: failure()
        run: |
          pulumi destroy --yes --skip-preview --stack ${{ secrets.PULUMI_STACK }}

      - name: Cleanup Ansible
        if: failure()
        run: |
          ansible-playbook -i inventory.json ansible/rollback.yml
