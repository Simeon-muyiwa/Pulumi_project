---
- name: Configure Kubernetes/Docker Baseline
  hosts: all
  become: yes
  vars:
    containerd_version: "1.7.*"
    k8s_version: "1.29.*"
    sysctl_params:
      net.bridge.bridge-nf-call-ip6tables: 1
      net.bridge.bridge-nf-call-iptables: 1
      net.ipv4.ip_forward: 1
      vm.swappiness: 10
      fs.inotify.max_user_watches: 524288

  tasks:
    # Phase 1: System Preparation
    - name: Validate Ubuntu version
      assert:
        that:
          - ansible_distribution == 'Ubuntu'
          - ansible_distribution_version in ['20.04', '22.04']
        msg: "Unsupported OS version"

    - name: Install baseline packages
      apt:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - jq
          - nfs-common
          - conntrack
        state: present
        update_cache: yes
        retries: 3
        delay: 10

    # Phase 2: Containerd Configuration
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce-stable

    - name: Install specific containerd version
      apt:
        name: "containerd.io={{ containerd_version }}"
        state: present
        force: yes

    - name: Configure containerd base template
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            systemd_cgroup = true
            sandbox_image = "registry.k8s.io/pause:3.9"
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            disable_snapshot_annotations = false
      notify: restart containerd

    # Phase 3: Kernel Tuning
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
        - ip_vs
        - ip_vs_rr
        - ip_vs_sh
        - nf_conntrack

    - name: Apply sysctl parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        reload: yes
      loop: "{{ sysctl_params | dict2items }}"

    # Phase 4: Kubernetes Installation
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0] }}/deb/ /"
        state: present
        filename: kubernetes-stable

    - name: Pin Kubernetes packages
      apt_preferences:
        filename: k8s-pin
        package: "*"
        pin: "version {{ k8s_version }}-*"
        pin_priority: 1000

    - name: Install kubeadm stack
      apt:
        name:
          - kubelet={{ k8s_version }}
          - kubeadm={{ k8s_version }}
          - kubectl={{ k8s_version }}
        state: present
        install_recommends: no

    - name: Prevent auto-upgrades
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    # Phase 5: Systemd Optimization
    - name: Configure kubelet systemd defaults
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS="--node-ip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
          KUBELET_CGROUP_ARGS="--cgroup-driver=systemd"
          KUBELET_RESERVED="--kube-reserved=cpu=250m,memory=1Gi"
      notify: restart kubelet

- name: Generate service account key pair
  command: |
    kubeadm init phase certs sa \
      --cert-dir /etc/kubernetes/pki \
      --config /tmp/kubeadm-config.yaml
  args:
    creates: /etc/kubernetes/pki/sa.key
  when:
    - node_role == "master"
  tags: ami_build

- name: Provision PKI structure
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: 0700
  tags: ami_build

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
